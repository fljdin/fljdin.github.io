<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Performance on Carnet de découvertes</title><link>https://fljd.in/tags/performance/</link><description>Recent content in Performance on Carnet de découvertes</description><generator>Hugo -- gohugo.io</generator><language>fr</language><managingEditor>Florent Jardin</managingEditor><lastBuildDate>Fri, 23 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://fljd.in/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Le partitionnement par hachage</title><link>https://fljd.in/2021/04/23/le-partitionnement-par-hachage/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2021/04/23/le-partitionnement-par-hachage/</guid><description>&lt;p>Le partitionnement déclaratif a été une véritable révolution à la sortie de la
version 10 de PostgreSQL en octobre 2017. La gestion des sous-tables devenait
alors bien plus aisée au quotidien, simplifiant leur mise en place et leur
maintenance.&lt;/p>
&lt;p>Sans cesse amélioré au cours des dernières années, je me souviens encore de mon
émerveillement devant la magie du partitionnement par hachage, &lt;a href="https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=1aba8e651ac3e37e1d2d875842de1e0ed22a651e" target="_blank" rel="noopener">apparu&lt;/a> en
version 11. Comment le déployer et que permet-il ? J&amp;rsquo;ai voulu m&amp;rsquo;en rendre compte
dans une rapide démonstration sur le type &lt;a href="https://fr.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="noopener">UUID&lt;/a> en étudiant les fonctions
d&amp;rsquo;appui qui se cachent derrière le hachage des valeurs.&lt;/p>
&lt;hr>
&lt;h2 id="un-très-bon-choix-de-repli">Un très bon choix de repli&lt;/h2>
&lt;p>Dès lors qu&amp;rsquo;une ou plusieurs tables dépasse le milliard de lignes, il y a fort
à parier que les problèmes de performance ou de maintenance soient au rendez-vous :
index volumineux, fragmentation importante, gel de l&amp;rsquo;activité pour cause de
&lt;a href="https://blog.crunchydata.com/blog/managing-transaction-id-wraparound-in-postgresql" target="_blank" rel="noopener">rebouclage des identifiants de transactions&lt;/a>, difficultés à purger les données.
L&amp;rsquo;apparition du partitionnement déclaratif dans PostgreSQL a permis d&amp;rsquo;y adresser
des solutions avec un minimum de complexité.&lt;/p>
&lt;p>La clé de partitionnement peut être définie par trois méthodes (&lt;em>range&lt;/em>, &lt;em>list&lt;/em>,
&lt;em>hash&lt;/em>) qui présentent chacunes des réponses appropriées aux besoins d&amp;rsquo;une table
ou d&amp;rsquo;une fonctionnalité. Nous privilégierons une clé répartie sur un intervalle
de temps pour l&amp;rsquo;archivage de données sur une date, ou bien une clé dont les valeurs
sont régulées dans une liste lorsque l&amp;rsquo;on souhaite maîtriser la répartition et
pouvoir la faire évoluer simplement.&lt;/p>
&lt;p>La dernière méthode &lt;em>hash&lt;/em> est intéressante à plusieurs égards par la confusion
de la clé primaire avec la clé de partionnement et par une répartition équilibrée
des données sur l&amp;rsquo;ensemble des sous-tables définies à l&amp;rsquo;avance. De manière générale,
si vous n&amp;rsquo;avez pas idée de votre clé de partitionnement et que vous lisez
principalement vos données sur leur clé primaire, la méthode par hachage peut être
un très bon choix de repli.&lt;/p>
&lt;p>Prenons une table très simple que nous découpons en cinq partitions à partir des
valeurs de la clé primaire dont le type est &lt;code>uuid&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tchar&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tdate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">timestamp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">without&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">zone&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HASH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1_0_5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modulus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">remainder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1_1_5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modulus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">remainder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1_2_5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modulus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">remainder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1_3_5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modulus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">remainder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1_4_5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modulus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">remainder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Avec cette configuration, l&amp;rsquo;identifiant de chaque ligne sera haché et réduit
par l&amp;rsquo;opérateur modulo pour obtenir une valeur entière comprise entre &lt;code>0&lt;/code> et &lt;code>4&lt;/code>.
Insérons un petit million de lignes et observons leur répartition.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">gen_random_uuid&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">md5&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">g&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">current_timestamp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">g&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">interval&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1 hour&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">generate_series&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="n">e6&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">g&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- INSERT 0 1000000
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="message">À partir de la version 13 de PostgreSQL, la fonction &lt;code>gen_random_uuid()&lt;/code> est
intégrée dans le catalogue et il n&amp;rsquo;est plus nécessaire de passer par des
extensions comme &lt;code>pgcrypto&lt;/code> ou &lt;code>uuid-ossp&lt;/code> pour générer un &lt;code>uuid&lt;/code> aléatoire.&lt;/div>
&lt;p>La vue &lt;code>pg_stat_user_tables&lt;/code> nous indique bien un nombre de tuples équitablement
insérés dans les partitions.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SUM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n_live_tup&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_live_tup&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_stat_user_tables&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">GROUP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">cube&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> relname | n_live_tup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---------+------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t1_0_5 | 200148
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t1_1_5 | 200123
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t1_2_5 | 199964
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t1_3_5 | 200184
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t1_4_5 | 199581
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | 1000000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>Le nombre de partitions est un choix crucial lors de l&amp;rsquo;initialisation de
la table, ou lors de sa transformation en table partitionnée, car l&amp;rsquo;ajout de
nouvelles partitions nécessite de remplacer une des sous-tables existantes par
un nouvel ensemble de partitions dont le diviseur doit être un multiple du
précédent.&lt;/p>
&lt;p>Voyons comment scinder l&amp;rsquo;une des partitions en deux.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">BEGIN&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">DETACH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1_0_5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1_0_10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modulus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">remainder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1_5_10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modulus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">remainder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1_0_5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- INSERT 0 200148
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">DROP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t1_0_5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Le contenu de l&amp;rsquo;ancienne partition &lt;code>t1_0_5&lt;/code> est déversé dans la table partitionnée
et l&amp;rsquo;opérateur modulus &lt;code>10&lt;/code> permet la redistribution des lignes dans les deux
nouvelles partitions, respectivement celles dont les restes de la division sont &lt;code>0&lt;/code>
et &lt;code>5&lt;/code>. On garantit ainsi que les autres partitions ne deviennent pas leur nouvelle
destination.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SUM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n_live_tup&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_live_tup&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_stat_user_tables&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">like&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;t1%10&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">GROUP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">cube&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> relname | n_live_tup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---------+------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t1_0_10 | 99960
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> t1_5_10 | 100188
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | 200148
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cette opération est lourde sur des données vivantes, avec des verrous de type
&lt;code>Access Exclusive&lt;/code> qui interdisent toutes consultations ou modifications de la
table partitionnée. Les sous-tables non impliquées dans la transformation restent
accessibles en lecture, pour peu qu&amp;rsquo;on puisse réaliser les &lt;code>SELECT&lt;/code> sur leur
nom exact de partition.&lt;/p>
&lt;hr>
&lt;h2 id="les-fonctions-dappui">Les fonctions d&amp;rsquo;appui&lt;/h2>
&lt;p>La plupart des types de données sont supportés par la méthode &lt;code>hash&lt;/code> à l&amp;rsquo;aide
notamment des classes d&amp;rsquo;opérateur et des fonctions d&amp;rsquo;appui fournies par PostgreSQL.
Par exemple, pour connaître la liste de types compatibles avec le partitionnement
par hachage, il suffit de consulter le catalogue.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">demo=# \dAc hash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> List of operator classes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> AM | Input type | Storage type | Operator class | Default?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------+-----------------------+--------------+---------------------+----------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hash | aclitem | | aclitem_ops | yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hash | anyarray | | array_ops | yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hash | anyenum | | enum_ops | yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hash | anyrange | | range_ops | yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hash | uuid | | uuid_ops | yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hash | xid | | xid_ops | yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hash | xid8 | | xid8_ops | yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(46 rows)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lors de l&amp;rsquo;élaboration du partitionnement par hachage, la communauté a étendu les
fonctions d&amp;rsquo;appui en &lt;a href="https://www.postgresql.org/message-id/CA%2BTgmoZSTkD8ZazeXefmHFMKNG8U8sap-DbKkwVM%2BBw223mkVQ%40mail.gmail.com" target="_blank" rel="noopener">proposant&lt;/a> que la valeur hachée soit encodée sur 64 bits
(&lt;code>bigint&lt;/code>) et mélangée par &lt;a href="https://fr.wikipedia.org/wiki/Salage_%28cryptographie%29" target="_blank" rel="noopener">salage&lt;/a>. Dans le cas du type &lt;code>uuid&lt;/code>, la fonction
d&amp;rsquo;appui est &lt;code>uuid_hash_extended&lt;/code> pour laquelle le deuxième argument vaut
&lt;code>HASH_PARTITION_SEED&lt;/code> en dur &lt;a href="https://github.com/postgres/postgres/blob/REL_13_2/src/backend/partitioning/partbounds.c#L4560" target="_blank" rel="noopener">dans le code&lt;/a> de PostgreSQL.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">demo=# \dAp hash uuid*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> List of support functions of operator families
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> AM | Operator family | Left type | Right type | Number | Function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------+-----------------+-----------+------------+--------+--------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hash | uuid_ops | uuid | uuid | 1 | uuid_hash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hash | uuid_ops | uuid | uuid | 2 | uuid_hash_extended
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">demo=# \df uuid_hash*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> List of functions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Schema | Name | Result data type | Argument data types | Type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------------+--------------------+------------------+---------------------+------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pg_catalog | uuid_hash | integer | uuid | func
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pg_catalog | uuid_hash_extended | bigint | uuid, bigint | func
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pour bien me rendre compte de la bonne utilisation d&amp;rsquo;une fonction d&amp;rsquo;appui pour
le hachage d&amp;rsquo;une colonne particulière, j&amp;rsquo;ajoute à mon catalogue une nouvelle
fonction &lt;code>uuid_hash_noseed&lt;/code> qui repose sur la méthode classique &lt;code>uuid_hash&lt;/code> sans
salage.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REPLACE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FUNCTION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid_hash_noseed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">seed&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">bigint&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">RETURNS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">bigint&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">$$&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">abs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uuid_hash&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">$$&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LANGUAGE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">sql&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">IMMUTABLE&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OPERATOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">CLASS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid_noseed_ops&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TYPE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">USING&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">OPERATOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FUNCTION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid_hash_noseed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uuid&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">bigint&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Le nouvel opérateur &lt;code>uuid_noseed_ops&lt;/code> est défini pour utiliser la fonction créée
précédemment en spécifiant le numéro d&amp;rsquo;appui &lt;code>2&lt;/code>, correspondant à la génération
d&amp;rsquo;un &lt;em>hash&lt;/em> encodé sur 64 bits (&lt;a href="https://www.postgresql.org/docs/current/xindex.html#XINDEX-HASH-SUPPORT-TABLE" target="_blank" rel="noopener">doc&lt;/a>) requis pour le partitionnement. Pour
valider mes hypothèses sur la distribution des lignes en fonction de leur reste
de division, je crée une table &lt;code>t2&lt;/code> avec une clé primaire au format &lt;code>uuid&lt;/code> dans
laquelle je sépare les valeurs de &lt;em>hash&lt;/em> paires et impaires.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">PRIMARY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">KEY&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HASH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">uuid_noseed_ops&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2_0_2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modulus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">remainder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2_1_2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARTITION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OF&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modulus&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">remainder&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">gen_random_uuid&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">generate_series&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="n">e6&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">g&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- INSERT 0 1000000
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>La suite de mon expérience m&amp;rsquo;a mené un peu plus loin que ce que j&amp;rsquo;imaginais à
l&amp;rsquo;origine. Même en l&amp;rsquo;absence d&amp;rsquo;un salage avec la constante &lt;code>HASH_PARTITION_SEED&lt;/code>,
une &lt;a href="https://github.com/postgres/postgres/blob/REL_13_2/src/include/common/hashfn.h#L80" target="_blank" rel="noopener">autre opération&lt;/a> au cœur de la méthode de hachage survient :
&lt;code>hash_combine64()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Combine two 64-bit hash values, resulting in another hash value, using the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * same kind of technique as hash_combine(). Testing shows that this also
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * produces good bit mixing.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="n">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">hash_combine64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uint64&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uint64&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* 0x49a0f4dd15e5a8e3 is 64bit random data */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="o">^=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nf">UINT64CONST&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0x49a0f4dd15e5a8e3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">54&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ce salage supplémentaire est fiable pour le sous-partitionnement, où l&amp;rsquo;on souhaite
obtenir un hachage de plusieurs colonnes pour établir la distribution des lignes
dans les partitions. Dans mon cas de test, puisque ma clé de partitionnement est
seule, l&amp;rsquo;opération ne fait que commuter les bits du résultat. Ce constat avait été
partagé entre &lt;a href="https://www.postgresql.org/message-id/CAMG7%3DyUde-E%2B4Fd0w%3DVU7VsgiL0yqpVB6uCi5drs5KLDyOCzFQ%40mail.gmail.com" target="_blank" rel="noopener">deux développeurs&lt;/a>, ce qui m&amp;rsquo;a donné la requête finale
ci-dessous afin de retrouver le reste de division et de le comparer avec les noms
de partitions de ma table &lt;code>t2&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tableoid&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">regclass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">partname&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uuid_hash_noseed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)::&lt;/span>&lt;span class="nb">bit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="s1">&amp;#39;49a0f4dd15e5a8e3&amp;#39;&lt;/span>&lt;span class="p">)::&lt;/span>&lt;span class="nb">bigint&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">remainder&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LIMIT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> tid | partname | remainder
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------------------------+----------+-----------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 000012e3-bf3e-4895-8dc4-adf25649680a | t2_0_2 | 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 00003fd4-b941-4c49-afcb-6449f2ddd169 | t2_1_2 | 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 000068b2-ce2d-4e13-9586-1ad986d31737 | t2_0_2 | 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 00006999-696e-4c15-ac94-d1de23b89c73 | t2_1_2 | 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 000085cb-e666-4ecb-a886-09ae86fc7d55 | t2_1_2 | 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 00008675-2291-4c49-afd1-4b55ccbd50c1 | t2_0_2 | 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0000c8a1-a0fb-4e53-882d-ed9c11aba44c | t2_1_2 | 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0000d1fd-759a-47c5-8e87-284455b36478 | t2_0_2 | 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0000d3af-64da-427c-815d-b7d32f62d7a6 | t2_1_2 | 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0000f608-f4a2-43dd-8483-94bb317e0c95 | t2_0_2 | 0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Avec l&amp;rsquo;apparition du partitionnement par hachage, PostgreSQL s&amp;rsquo;est doté d&amp;rsquo;une
nouvelle méthode permettant de bénéficier de tous les avantages du partitionnement
déclaratif sans se soucier de la distribution logique des valeurs de la clé de
partitionnement.&lt;/p>
&lt;p>Bien que l&amp;rsquo;élagage de partition lors de la planification ne soit pas l&amp;rsquo;objectif
de la manœuvre puisque la clé de partitionnement est par nature indexée, il
devient très intéressant de bénéficier notamment d&amp;rsquo;une maintenance par &lt;code>VACUUM&lt;/code>
accélérée en subdivisant les données et les index sur le disque. La distribution
des opérations de lecture et d&amp;rsquo;écriture sur plusieurs disques à l&amp;rsquo;aide des
tablespaces est également possible &lt;a href="https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=ca4103025dfe26eaaf6a500dec9170fbb176eebc" target="_blank" rel="noopener">depuis la version 12&lt;/a> et apporte son lot
de solutions pour les tables très volumineuses.&lt;/p></description></item><item><title>Comprendre les requêtes préparées</title><link>https://fljd.in/2021/03/30/comprendre-les-requetes-preparees/</link><pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2021/03/30/comprendre-les-requetes-preparees/</guid><description>&lt;p>Les requêtes ou &lt;a href="https://en.wikipedia.org/wiki/Prepared_statement" target="_blank" rel="noopener">instructions préparées&lt;/a> sont un mécanisme proposé par la
plupart des moteurs de bases de données afin de réexécuter un ordre SQL semblable
au précédent. On parle d&amp;rsquo;un &lt;em>template&lt;/em> de requête qu&amp;rsquo;il est nécessaire de
préparer avant d&amp;rsquo;exécuter. Les principaux bénéfices que nous lui connaissons
méritent un article afin de mieux comprendre leur implémentation.&lt;/p>
&lt;hr>
&lt;h2 id="parse-bind-execute">Parse-Bind-Execute&lt;/h2>
&lt;p>Au cours de sa vie, tout bon artisan du Web finit par découvrir les ravages
des attaques par &lt;a href="https://fr.wikipedia.org/wiki/Injection_SQL" target="_blank" rel="noopener">injection SQL&lt;/a>, soit par la sagesse de leurs mentors, soit
par la douloureuse expérience du terrain. Bien que les nombreuses couches
d&amp;rsquo;abstraction les rendent aujourd&amp;rsquo;hui inopérantes grâce aux échappements ou à la
validation des données en entrée, ces attaques sont encore possibles dès que la
requête est écrite en pur SQL.&lt;/p>
&lt;p>&lt;img src="https://fljd.in/img/fr/2021-03-30-exploits_of_a_mom.png" alt="Exploit of a mom">&lt;/p>
&lt;p>&lt;em>Source : &lt;a href="https://xkcd.com/327" target="_blank" rel="noopener">https://xkcd.com/327&lt;/a>&lt;/em>&lt;/p>
&lt;p>L&amp;rsquo;une des meilleures approches pour éviter ces attaques, repose sur la séparation
des requêtes et de leurs paramètres au moment de leur exécution. L&amp;rsquo;instruction,
dite &lt;strong>préparée&lt;/strong>, est ainsi intégralement analysée et le positionnement des valeurs
est connu à l&amp;rsquo;avance. Toute tentative d&amp;rsquo;injection est réduite à néant.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">PREPARE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_notation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">exam&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">notation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">students&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lastname&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">firstname&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">EXECUTE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_notation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Pattinson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">$$&lt;/span>&lt;span class="n">Robert&lt;/span>&lt;span class="s1">&amp;#39; ; DROP TABLE students;--$$);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">-- (0 rows)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>L&amp;rsquo;exemple précédent utilise les ordres SQL &lt;code>PREPARE&lt;/code> et &lt;code>EXECUTE&lt;/code> mais ce n&amp;rsquo;est
pas la seule façon de déclarer une instruction préparée. En effet, il existe à
ce sujet le sous-protocole &lt;em>Extended Query&lt;/em> décrit dans la documentation sur les
&lt;a href="https://www.postgresql.org/docs/13/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY" target="_blank" rel="noopener">flux de messages&lt;/a>. La communication client-serveur se découpe en trois
messages afin de garantir la prise en compte des paramètres à inclure dans une
instruction préparée, sans risque d&amp;rsquo;injection.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Parse&lt;/strong> : l&amp;rsquo;instruction SQL et éventuellement un nom et un typage pour les
paramètres ;&lt;/li>
&lt;li>&lt;strong>Bind&lt;/strong> : les valeurs à positionner dans l&amp;rsquo;instruction préparée donnée ;&lt;/li>
&lt;li>&lt;strong>Execute&lt;/strong> : déclenche la lecture du curseur ouvert sur le serveur.&lt;/li>
&lt;/ul>
&lt;p>Il est donc de la responsabilité du pilote ou du connecteur fourni avec le
langage ou le &lt;em>framework&lt;/em> de son choix, de proposer les méthodes de communication
qui s&amp;rsquo;appuient sur le bon protocole étendu. En C et avec la &lt;code>libpq&lt;/code> par exemple
(&lt;a href="https://www.postgresql.org/docs/13/libpq-exec.html" target="_blank" rel="noopener">doc&lt;/a>), la déclaration d&amp;rsquo;une instruction préparée se réalise avec la méthode
&lt;code>PQprepare&lt;/code> et l&amp;rsquo;exécution avec &lt;code>PQexecPrepared&lt;/code>.&lt;/p>
&lt;p>Côté serveur, si l&amp;rsquo;on étend la verbosité des traces d&amp;rsquo;activité avec les
paramètres &lt;code>log_parser_stats&lt;/code>, &lt;code>log_planner_stats&lt;/code>, &lt;code>log_executor_stats&lt;/code> et
&lt;code>log_min_duration_statement&lt;/code>, il est possible d&amp;rsquo;identifier les étapes citées plus
haut avec l&amp;rsquo;exécution d&amp;rsquo;une requête préparée par &lt;code>pgbench&lt;/code>, nommée &lt;code>P0_1&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Message PARSE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">LOG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARSER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">STATISTICS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">LOG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PARSE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ANALYSIS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">STATISTICS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">LOG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">REWRITER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">STATISTICS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">LOG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">284&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">P0_1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">abalance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pgbench_accounts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- Message BIND
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">LOG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PLANNER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">STATISTICS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">LOG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">211&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">bind&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">P0_1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">abalance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pgbench_accounts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">DETAIL&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">parameters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1600439&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- Message EXECUTE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">LOG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">EXECUTOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">STATISTICS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">LOG&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">duration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">170&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ms&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">execute&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">P0_1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">abalance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pgbench_accounts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">DETAIL&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">parameters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;1600439&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="quand-un-plan-générique-se-déroule-sans-accroc">Quand un plan générique se déroule sans accroc&lt;/h2>
&lt;p>Cependant, la sécurité contre les injections n&amp;rsquo;est pas mise en avant dans la
documentation de PostgreSQL au sujet de &lt;code>PREPARE&lt;/code>. Et pour cause, depuis son
implémentation dans la version 7.3, cette méthode repose sur des mécanismes
profonds pour optimiser les performances d&amp;rsquo;une requête lorsqu&amp;rsquo;elle est exécutée
un certain nombre de fois.&lt;/p>
&lt;blockquote>
&lt;p>Les instructions préparées sont principalement intéressantes quand une seule
session est utilisée pour exécuter un grand nombre d&amp;rsquo;instructions similaires.
La différence de performances est potentiellement significative si les
instructions sont complexes à planifier ou à réécrire, par exemple, si la
requête implique une jointure de plusieurs tables ou requiert l&amp;rsquo;application de
différentes règles. Si l&amp;rsquo;instruction est relativement simple à planifier ou à
réécrire mais assez coûteuse à exécuter, l&amp;rsquo;avantage de performance des
instructions préparées est moins net.&lt;/p>
&lt;p>Source : &lt;a href="https://docs.postgresql.fr/13/sql-prepare.html" target="_blank" rel="noopener">https://docs.postgresql.fr/13/sql-prepare.html&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>Avec PostgreSQL, chaque requête passe par une &lt;a href="https://www.postgresql.org/docs/13/query-path.html" target="_blank" rel="noopener">succession d&amp;rsquo;étapes&lt;/a> pour
obtenir le résultat final. Ce fonctionnement permet de qualifier la transformation
d&amp;rsquo;une étape à une autre en s&amp;rsquo;assurant par ailleurs que la syntaxe est bonne ou
qu&amp;rsquo;un chemin optimisé puisse être emprunté.&lt;/p>
&lt;ul>
&lt;li>Le &lt;em>parser&lt;/em> vérifie la syntaxe de l&amp;rsquo;instruction, ouvre une transaction pour
réaliser l&amp;rsquo;analyse sémantique auprès des relations voulues ;&lt;/li>
&lt;li>Le &lt;em>rewriter&lt;/em> réalise les transformations nécessaires en fonction des règles
telle que la définition d&amp;rsquo;une vue ou d&amp;rsquo;une fonction ;&lt;/li>
&lt;li>Le &lt;em>planner&lt;/em> (ou planificateur) sélectionne le plan d&amp;rsquo;exécution le moins coûteux
en fonction des régles d&amp;rsquo;accès et des estimations connues ;&lt;/li>
&lt;li>L&amp;rsquo;&lt;em>executor&lt;/em> suit les consignes du plan d&amp;rsquo;exécution et consolide le résultat
final à retourner au client.&lt;/li>
&lt;/ul>
&lt;p>Les étapes d&amp;rsquo;analyse d&amp;rsquo;une instruction lors des messages &lt;code>Parse&lt;/code> et &lt;code>Bind&lt;/code> ont un
coût : il est nécessaire de valider la syntaxe, réécrire les jointures si besoin
et surtout, construire le plan d&amp;rsquo;exécution. Par défaut, une série de plans sera
construit avant que le moteur n&amp;rsquo;en retienne qu&amp;rsquo;un seul dont le coût est bon
compromis avec la moyenne des cinq premiers. Ce plan devient le &lt;strong>plan générique&lt;/strong>
et sera réutilisé au sein de la même session pour toutes les exécutions de
l&amp;rsquo;instruction préparée.&lt;/p>
&lt;p>L&amp;rsquo;utilisation de ce plan d&amp;rsquo;exécution unique devient la clé pour économiser
quelques précieuses millisecondes d&amp;rsquo;analyse à chaque nouveau message &lt;code>Execute&lt;/code>.
Si je reprends l&amp;rsquo;exemple de Bobby et de la table &lt;code>students&lt;/code>, on observe un gain
significatif au bout de la cinquième ou sixième exécution avec un temps de
planification (&lt;em>Planning Time&lt;/em>) quasi-nul.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">ANALYZE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">EXECUTE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_notation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Pattinson&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Robert&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- QUERY PLAN
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- -------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Index Scan using students_lastname_firstname_idx on students
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- (cost=0.29..6.06 rows=1 width=13) (actual time=0.027..0.029 rows=1 loops=1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Index Cond: ((lastname = &amp;#39;Pattinson&amp;#39;::text) AND (firstname = &amp;#39;Robert&amp;#39;::text))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Planning Time: 0.235 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Execution Time: 0.071 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Planning Time: 0.225 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Execution Time: 0.090 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Planning Time: 0.323 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Execution Time: 0.081 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Planning Time: 0.249 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Execution Time: 0.074 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Planning Time: 0.218 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Execution Time: 0.068 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Planning Time: 0.232 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Execution Time: 0.068 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Planning Time: 0.040 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Execution Time: 0.091 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Planning Time: 0.036 ms
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Execution Time: 0.089 ms
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Depuis la version 12 de PostgreSQL, il est possible de changer le comportement
du moteur avec le paramètre &lt;code>plan_cache_mode&lt;/code> en forçant l&amp;rsquo;utilisation du plan
générique dès la deuxième exécution (&lt;code>force_generic_plan&lt;/code>) ou ne pas l&amp;rsquo;utiliser
du tout (&lt;code>force_custom_plan&lt;/code>).&lt;/p>
&lt;hr>
&lt;h2 id="les-dessous-du-temps-de-réponse">Les dessous du temps de réponse&lt;/h2>
&lt;p>Pour se convaincre des bénéfices qu&amp;rsquo;engendre l&amp;rsquo;utilisation des instructions préparées,
j&amp;rsquo;ai souhaité étudier le comportement d&amp;rsquo;une même requête &lt;code>SELECT&lt;/code> sur la table
&lt;code>pgbench_accounts&lt;/code>. L&amp;rsquo;outil &lt;code>pgbench&lt;/code> fourni avec le projet PostgreSQL permet de
générer une variété de requêtes sur un modèle de données générique.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PGDATABASE&lt;/span>&lt;span class="o">=&lt;/span>pgbench
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pgbench --initialize --scale&lt;span class="o">=&lt;/span>&lt;span class="m">100&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>La table contient 10 millions de lignes et dispose d&amp;rsquo;une clé primaire sur laquelle
nous estimerons qu&amp;rsquo;une grande partie des requêtes réalisera ses lectures.
J&amp;rsquo;active également les paramètres pour tracer les statistiques de chacune des
étapes citées plus haut, afin d&amp;rsquo;en savoir plus sur leur durée respective et la
répartition du temps de travail entre elles.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">PGOPTIONS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-c client_min_messages=log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">PGOPTIONS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$PGOPTIONS&lt;/span>&lt;span class="s2"> -c log_parser_stats=on&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">PGOPTIONS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$PGOPTIONS&lt;/span>&lt;span class="s2"> -c log_planner_stats=on&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">PGOPTIONS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$PGOPTIONS&lt;/span>&lt;span class="s2"> -c log_executor_stats=on&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> PGOPTIONS
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ces informations statistiques de l&amp;rsquo;ensemble des requêtes de &lt;code>pgbench&lt;/code> sont
redirigées de la sortie d&amp;rsquo;erreurs vers une routine &lt;code>awk&lt;/code> qui agrège les temps
de traitement. Dans cette démonstration, le paramètre &lt;code>plan_cache_mode&lt;/code> est
positionné sur &lt;code>auto&lt;/code>, sa valeur par défaut.&lt;/p>
&lt;ul>
&lt;li>Exécution sans préparation&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pgbench --protocol&lt;span class="o">=&lt;/span>simple --select-only --transactions&lt;span class="o">=&lt;/span>&lt;span class="m">10000&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span> &amp;gt;/dev/null &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> /STATISTICS/ { $1=&amp;#34;&amp;#34; ; k=$0 }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> /elapsed/ { stats[k]+=$8 ; count[k]+=1 ; total+=$8 }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> END { for (s in stats) printf &amp;#34;%s: %1.3f ms\n&amp;#34;, s, stats[s]*1000 }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> END { printf &amp;#34; -- TOTAL: %1.3f ms\n&amp;#34;, total*1000 }&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> EXECUTOR STATISTICS: 163.910 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PARSE ANALYSIS STATISTICS: 57.493 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PLANNER STATISTICS: 163.451 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PARSER STATISTICS: 37.018 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REWRITER STATISTICS: 13.753 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- TOTAL: 435.625 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Exécution avec préparation&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">pgbench --protocol&lt;span class="o">=&lt;/span>prepared --select-only --transactions&lt;span class="o">=&lt;/span>&lt;span class="m">10000&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span> &amp;gt;/dev/null &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> /STATISTICS/ { $1=&amp;#34;&amp;#34; ; k=$0 }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> /elapsed/ { stats[k]+=$8 ; count[k]+=1 ; total+=$8 }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> END { for (s in stats) printf &amp;#34;%s: %1.3f ms\n&amp;#34;, s, stats[s]*1000 }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> END { printf &amp;#34; -- TOTAL: %1.3f ms\n&amp;#34;, total*1000 }&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> EXECUTOR STATISTICS: 157.778 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PARSE ANALYSIS STATISTICS: 0.746 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PLANNER STATISTICS: 1.146 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> PARSER STATISTICS: 0.129 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> REWRITER STATISTICS: 0.031 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- TOTAL: 159.830 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Rapporté à une exécution unitaire, la répartition des temps de traitement entre
les phases de préparation et d&amp;rsquo;exécution est sans surprise. Alors que le temps
de préparation (&lt;em>Parse, Rewrite, Plan&lt;/em>) est supérieur au temps d&amp;rsquo;exécution pour des instructions non
préparées, il s&amp;rsquo;annule intégralement sur un volume de plusieurs milliers de
requêtes exécutées dans la même session avec l&amp;rsquo;utilisation d&amp;rsquo;un plan générique.&lt;/p>
&lt;p>&lt;img src="https://fljd.in/img/fr/2021-03-30-repartition-temps-de-reponse.png" alt="Répartition des temps d’exécution">&lt;/p>
&lt;div class="message">Le graphique ci-dessus reprend les temps moyens de chaque étape d&amp;rsquo;une requête
unitaire à l&amp;rsquo;issue d&amp;rsquo;une vingtaine de traitements &lt;code>pgbench&lt;/code> pour 10 000
transactions.&lt;/div>
&lt;hr>
&lt;h2 id="pour-aller-plus-loin">Pour aller plus loin&lt;/h2>
&lt;p>Que ce soit pour se protéger des injections ou pour atteindre de hautes
performances, j&amp;rsquo;ai voulu montrer dans cet article qu&amp;rsquo;il pouvait être bénéfique
de préparer ses requêtes, d&amp;rsquo;autant plus si votre librairie préférée le supporte.
Si vous êtes à la recherche de temps de réponse les plus faibles possibles,
posez-vous les questions suivantes :&lt;/p>
&lt;ul>
&lt;li>Mes requêtes ont-elles fréquemment la même forme ?&lt;/li>
&lt;li>Leurs plans d&amp;rsquo;exécution sont-ils relativement bien optimisés ?&lt;/li>
&lt;li>Mon application gère-t-elle la persistance des connexions ?&lt;/li>
&lt;/ul>
&lt;p>Si vous rentrez dans ces cases, vous gagnerez de précieuses millisecondes avec
un plan générique au sein d&amp;rsquo;une même session. Dans le cas où la persistance des
connexions n&amp;rsquo;est pas votre fort, il est possible de coupler &lt;a href="https://fljd.in/2020/08/21/tour-d-horizon-de-pgbouncer">PgBouncer&lt;/a> avec
l&amp;rsquo;extension &lt;a href="https://github.com/dimitri/preprepare" target="_blank" rel="noopener">preprepare&lt;/a> pour définir un ensemble d&amp;rsquo;instructions préparées dès
l&amp;rsquo;ouverture de la session.&lt;/p></description></item><item><title>Tour d'horizon de PgBouncer</title><link>https://fljd.in/2020/08/21/tour-d-horizon-de-pgbouncer/</link><pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2020/08/21/tour-d-horizon-de-pgbouncer/</guid><description>&lt;blockquote>
&lt;p>Les programmes de regroupement de connexions (&lt;em>pooling&lt;/em>) vous permettent de
réduire la surcharge liée à la base de données lorsque le nombre de connexions
physiques réduit les performances. Ceci est particulièrement pertinent sous
Windows, où les limitations du système empêchent un grand nombre de connexions.
C&amp;rsquo;est également vital pour les applications Web où le nombre de connexions peut
devenir très important.&lt;/p>
&lt;p>(Source : &lt;a href="https://wiki.postgresql.org/wiki/Replication,_Clustering,_and_Connection_Pooling#Connection_Pooling_and_Acceleration" target="_blank" rel="noopener">https://wiki.postgresql.org&lt;/a>)&lt;/p>&lt;/blockquote>
&lt;p>Je n&amp;rsquo;ai pas trouvé meilleure approche que la traduction du wiki communautaire du
projet PostgreSQL pour aborder l&amp;rsquo;outil PgBouncer, faisant partie avec Pgpool-II,
des deux seuls &lt;em>poolers&lt;/em> de connexions largement répandus. Le produit est
déconcertant de facilité, sa documentation et la littérature qui gravitent sur
Internet sont claires et unanimes : PgBouncer améliorera grandement les
performances de votre instance PostgreSQL !&lt;/p>
&lt;p>Dans cet article, je vous propose un rapide aperçu de PgBouncer avec quelques
cas possibles d&amp;rsquo;utilisation. Nous parlerons aussi du récent support de
l&amp;rsquo;authentification SCRAM et comment le configurer sans effort.&lt;/p>
&lt;hr>
&lt;h2 id="théorie-ma-vieille-amie">Théorie, ma vieille amie&lt;/h2>
&lt;p>Depuis ses origines, le fonctionnement de PostgreSQL repose sur le modèle
client/serveur &lt;a href="https://docs.postgresql.fr/12/tutorial-arch.html" target="_blank" rel="noopener">multi-processus&lt;/a>, c&amp;rsquo;est-à-dire que chaque processus aura une
tâche définie et une zone mémoire qui lui est propre. Ce modèle s&amp;rsquo;oppose à
l&amp;rsquo;architecture &lt;a href="https://fr.wikipedia.org/wiki/Thread_%28informatique%29" target="_blank" rel="noopener">multi-thread&lt;/a> dans laquelle un processus peut être partagé par
plusieurs instructions indépendantes et présenterait des risques de
&lt;a href="https://www.postgresql.org/message-id/flat/3647.130.243.12.138.1098892576.squirrel%40130.243.12.138" target="_blank" rel="noopener">corruptions de mémoire&lt;/a>.&lt;/p>
&lt;p>Ainsi, pour chaque &lt;a href="https://www.postgresql.org/docs/12/connect-estab.html" target="_blank" rel="noopener">demande de connexion&lt;/a> vers l&amp;rsquo;instance, le processus
principal &lt;code>postgres&lt;/code> se charge de l&amp;rsquo;authentification avant de créer un nouveau
processus &lt;em>backend&lt;/em> qui maintiendra le lien entre les deux parties et assurera
l&amp;rsquo;aboutissement des commandes du processus client, appelé &lt;em>frontend&lt;/em>. Le
&lt;em>backend&lt;/em> ne sera libéré qu&amp;rsquo;à la déconnexion de la session utilisateur, comme
l&amp;rsquo;illustre le schéma ci-après.&lt;/p>
&lt;p>&lt;img src="https://fljd.in/img/fr/2020-08-21-architecture-classique.png" alt="Architecture simplifiée">&lt;/p>
&lt;p>Cependant, l&amp;rsquo;établissement de la connexion n&amp;rsquo;est pas une opération anodine. Les
coûts des échanges à travers le réseau, de création d&amp;rsquo;un processus, de l&amp;rsquo;allocation
de sa mémoire et du paramétrage de la session, représenteraient une &lt;a href="https://www.depesz.com/2012/12/02/what-is-the-point-of-bouncing/" target="_blank" rel="noopener">poignée de
millisecondes&lt;/a>.&lt;/p>
&lt;p>Comme indiqué en préambule, les applications critiques telles que celles du
e-commerce requièrent des temps de réponses les plus faibles possibles, avec des
exigences de l&amp;rsquo;ordre d&amp;rsquo;une centaine de millisecondes par appel de page, contenant
elles-mêmes des centaines de requêtes… C&amp;rsquo;est à ce moment-là que PgBouncer entre
en jeu.&lt;/p>
&lt;p>Le schéma précédent évolue avec le &lt;em>pooler de connexions&lt;/em> entre les connexions
clientes et l&amp;rsquo;instance de base de données. Le processus &lt;code>pgbouncer&lt;/code> est donc
responsable des demandes entrantes et se comporte comme un proxy, qu&amp;rsquo;il soit sur
le serveur hébergeant les données, sur les serveurs frontaux ou même sur un
serveur tiers, dédié à ces redirections.&lt;/p>
&lt;p>&lt;img src="https://fljd.in/img/fr/2020-08-21-architecture-pgbouncer.png" alt="Architecture avec PgBouncer">&lt;/p>
&lt;p>PgBouncer ne présente qu&amp;rsquo;une faible empreinte mémoire équivalente à &lt;a href="https://www.pgbouncer.org/features.html" target="_blank" rel="noopener">2 ko par
connexion&lt;/a> et repose sur un binaire et un fichier de configuration. L&amp;rsquo;outil
gère des &lt;em>pools&lt;/em> de connexions par bases de données ou par rôles (ou les deux)
et maintient un certain nombre de connexions actives vers l&amp;rsquo;instance pour les
recycler en cas d&amp;rsquo;arrivée de nouveaux &lt;em>frontends&lt;/em>.&lt;/p>
&lt;p>La configuration est extrêmement simple et épurée, et ne devrait rebuter personne.
Par exemple, en supposant que l&amp;rsquo;instance PostgreSQL écoute localement sur le port
5433 et dispose d&amp;rsquo;une base &lt;code>data1&lt;/code>, nous cherchons à définir un &lt;em>pool&lt;/em> de 5 à 50
&lt;em>backends&lt;/em> avec un délai de 30 secondes d&amp;rsquo;inactivité avant la déconnexion réelle
au serveur. Le fichier de configuration suivant est alors parfaitement adapté :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[pgbouncer]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">listen_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">demo.priv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">listen_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">5432&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">auth_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">userlist.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">server_idle_timeout&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">min_pool_size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[database]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">data1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">host=localhost port=5433 dbname=data1 pool_size=50&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="chérie-tu-as-les-clés">Chérie, tu as les clés ?&lt;/h2>
&lt;p>Puisque PgBouncer fait office de proxy entre les applications et les bases de
données en respectant le protocole de connexion, il lui revient d&amp;rsquo;assurer la
validation des mots de passe de chaque nouvelle demande entrante. L&amp;rsquo;implémentation
des différentes méthodes telles que &lt;code>md5&lt;/code> ou &lt;code>scram-sha-256&lt;/code> se trouve dans le
fichier &lt;code>src/proto.c&lt;/code>(&lt;a href="https://github.com/pgbouncer/pgbouncer/blob/master/src/proto.c" target="_blank" rel="noopener">source&lt;/a>) et garantit qu&amp;rsquo;une demande de connexion réalisée sur
l&amp;rsquo;interface de PgBouncer soit bien légitime et autorisée auprès de l&amp;rsquo;instance.&lt;/p>
&lt;p>&lt;strong>Fichier auth_file&lt;/strong>&lt;/p>
&lt;p>À ce sujet, l&amp;rsquo;outil propose deux solutions pour vérifier un mot de passe. La plus
basique consiste à renseigner un fichier (ou &lt;code>auth_file&lt;/code>) avec les couples
&lt;em>login/password&lt;/em> qui seront consultés à chaque demande, et les comparer avec les
éléments de l&amp;rsquo;utilisateur. Les données doivent être identiques aux informations
stockées dans l&amp;rsquo;instance PostgreSQL, plus précisément dans la relation système
&lt;code>pg_authid&lt;/code>, ou historiquement &lt;code>pg_shadow&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">password_encryption&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;scram-sha-256&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ROLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">frontend&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PASSWORD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;pass&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LOGIN&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rolpassword&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_authid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rolname&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;frontend&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="n">gx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- -[ RECORD 1 ]----------------------------------------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- rolpassword | SCRAM-SHA-256$4096:e2iH7Tv/XJrD0bxiSNt4yA==$Pxhbz2…
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>L&amp;rsquo;ajout d&amp;rsquo;une nouvelle ligne dans le fichier &lt;code>userlist.txt&lt;/code> nécessite uniquement
de prendre soin d&amp;rsquo;entourer chaque mot par des guillemets doubles. PgBouncer
surveillera alors son contenu afin de disposer des bonnes informations à tout
moment.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># userlist.txt &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">&amp;#34;frontend&amp;#34; &amp;#34;SCRAM-SHA-256$4096:e2iH7Tv/XJrD0bxiSNt4yA&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">=$Pxhbz2…&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Délégation auth_user&lt;/strong>&lt;/p>
&lt;p>Si la maintenance d&amp;rsquo;un tel fichier s&amp;rsquo;avère complexe pour quelque raison que ce
soit, il est possible de déléguer un rôle à la consultation de la table &lt;code>pg_authid&lt;/code>
directement dans l&amp;rsquo;instance, en précisant le paramètre &lt;code>auth_user&lt;/code>. Le paramètre
&lt;code>auth_query&lt;/code> définit la requête à exécuter pour ensuite comparer les résultats
avec les identifiants de connexion. Cette requête repose sur la vue &lt;code>pg_shadow&lt;/code>
mais de nombreuses variantes sont possibles, comme une requête plus élaborée sur
&lt;code>pg_authid&lt;/code> ou une &lt;a href="https://github.com/CrunchyData/crunchy-containers/blob/master/bin/postgres-ha/sql/pgbouncer/pgbouncer-install.sql#L71" target="_blank" rel="noopener">fonction&lt;/a> qui dispose des bons droits de consultation avec
la clause &lt;code>SECURITY DEFINER&lt;/code> comme le suggère la &lt;a href="http://www.pgbouncer.org/config.html#auth_query" target="_blank" rel="noopener">documentation&lt;/a>.&lt;/p>
&lt;p>Le support de la méthode d&amp;rsquo;authentification par SCRAM est arrivé avec la version
PgBouncer 1.14 en juin 2020. Le mot de passe chiffré avec SCRAM ne peut pas être
utilisé pour de la &lt;a href="http://www.pgbouncer.org/config.html#authentication-file-format" target="_blank" rel="noopener">délégation de connexion&lt;/a>, tel que le propose le paramètre
&lt;code>auth_user&lt;/code>. &lt;a href="https://github.com/pgbouncer/pgbouncer/issues/508#issuecomment-678142543" target="_blank" rel="noopener">L&amp;rsquo;un des contournements&lt;/a> consiste à hacher le mot de passe en &lt;code>md5&lt;/code>
pour le rôle de délégation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">password_encryption&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;md5&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ROLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">admin&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SUPERUSER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PASSWORD&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;pass&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LOGIN&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rolpassword&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_authid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">rolname&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;admin&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="n">gx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- -[ RECORD 1 ]------------------------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- rolpassword | md57a25b0bc04e77a2f7453dd021168cdc2
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Le fichier &lt;code>userlist.txt&lt;/code> ne contiendra donc qu&amp;rsquo;une seule ligne pour le rôle
&lt;code>admin&lt;/code> défini comme &lt;code>auth_user&lt;/code> dans la configuration PgBouncer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># userlist.txt &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">&amp;#34;admin&amp;#34; &amp;#34;md57a25b0bc04e77a2f7453dd021168cdc2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="k">[pgbouncer]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">listen_addr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">demo.priv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">listen_port&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">5432&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">auth_type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">scram-sha-256&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">auth_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">userlist.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">auth_user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">admin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;auth_query = SELECT usename, passwd FROM pg_shadow WHERE usename=$1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">[database]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">data1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">host=localhost port=5433 dbname=data1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Côté client, l&amp;rsquo;illusion est parfaite ! Le rôle &lt;code>frontend&lt;/code> se connecte à l&amp;rsquo;instance
sans besoin d&amp;rsquo;ajouter ses identifiants dans le fichier &lt;code>userlist.txt&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ psql &amp;#34;host=priv.demo dbname=data1 user=frontend&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Password for user frontend:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">psql (12.4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Type &amp;#34;help&amp;#34; for help.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">data1=&amp;gt; \conninfo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">You are connected to database &amp;#34;data1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> as user &amp;#34;frontend&amp;#34; on host &amp;#34;priv.demo&amp;#34; at port &amp;#34;5432&amp;#34;.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="vers-linfini-et-au-delà">Vers l&amp;rsquo;infini et au-delà&lt;/h2>
&lt;p>PgBouncer est un outil à connaître et à déployer sans modération pour la recherche
de performance. Il se couple parfaitement bien avec une configuration HAProxy
pour une architecture de haute-disponibilité si le besoin se fait sentir. Le
support de l&amp;rsquo;authentification SCRAM est une excellente avancée, alors que la
communauté se décide de la définir comme un &lt;a href="https://www.postgresql.org/message-id/flat/d5b0ad33-7d94-bdd1-caac-43a1c782cab2@2ndquadrant.com" target="_blank" rel="noopener">standard&lt;/a> pour les prochaines versions
majeures de PostgreSQL.&lt;/p>
&lt;p>D&amp;rsquo;autres fonctionnalités essentielles n&amp;rsquo;ont volontairement pas été abordées dans
cet article, comme le &lt;em>pooling&lt;/em> de transactions et le paramètre &lt;code>pool_mode&lt;/code>, ou
simplement la pseudo-base &lt;code>pgbouncer&lt;/code> qui joue le rôle de console d&amp;rsquo;administration
très fournie en informations sur les &lt;em>pools&lt;/em> et sessions actives. Gageons que
j&amp;rsquo;y passe plus de temps à l&amp;rsquo;avenir pour vous les présenter !&lt;/p></description></item><item><title>Les statistiques au service du plan d'exécution</title><link>https://fljd.in/2020/07/01/les-statistiques-au-service-du-plan-d-execution/</link><pubDate>Wed, 01 Jul 2020 20:30:00 +0200</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2020/07/01/les-statistiques-au-service-du-plan-d-execution/</guid><description>&lt;p>La lecture d&amp;rsquo;un plan d&amp;rsquo;exécution fait partie des meilleures armes du développeur
et de l&amp;rsquo;administrateur de bases de données pour identifier les problèmes de
performances. Dans &lt;a href="https://fljd.in/2019/09/27/index-decomplexe">un précédent article&lt;/a>, je
présentais l&amp;rsquo;intérêt de positionner un index sur les colonnes d&amp;rsquo;une table pour
faciliter les recherches, notamment avec l&amp;rsquo;aide de la commande &lt;code>EXPLAIN&lt;/code>.&lt;/p>
&lt;p>À cette époque, je ne m&amp;rsquo;étais pas attardé sur la notion des statistiques de
données, que l&amp;rsquo;on retrouve dans la plupart des moteurs du marché. Voyons de plus
près ce que propose PostgreSQL pour garantir les performances de vos requêtes.&lt;/p>
&lt;hr>
&lt;h2 id="estimer-ou-ne-pas-estimer">Estimer ou ne pas estimer&lt;/h2>
&lt;p>Une statistique de données résulte d&amp;rsquo;un calcul en arrière plan sur tout ou partie
des données d&amp;rsquo;une table. Il peut s&amp;rsquo;agir de la quantité de lignes, du nombre
distinct de valeurs dans une colonne, ou bien encore de la &lt;strong>distribution&lt;/strong> des
valeurs sous forme d&amp;rsquo;histogramme. Ainsi, pour chaque table et chaque colonne, il
existe des données supplémentaires qui permettent au moteur d&amp;rsquo;avoir une juste
&lt;strong>estimation&lt;/strong> des données qu&amp;rsquo;il s&amp;rsquo;apprête à manipuler.&lt;/p>
&lt;p>Prenons la table &lt;code>pgbench_history&lt;/code> sur laquelle j&amp;rsquo;ai ajouté un index pour la
colonne &lt;code>aid&lt;/code>. Quel plan nous propose le moteur pour récupérer toutes les lignes
dont la valeur &lt;code>aid&lt;/code> est inférieure à 1 000 ?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pgbench_history&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> QUERY PLAN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Bitmap Heap Scan on pgbench_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (cost=4.34..11.79 rows=9 width=116)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Recheck Cond: (aid &amp;lt; 1000)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -&amp;gt; Bitmap Index Scan on pgbench_history_aid_idx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (cost=0.00..4.34 rows=9 width=0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Index Cond: (aid &amp;lt; 1000)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Le résultat qui s&amp;rsquo;affiche correspond au meilleur plan connu et repose sur un
système de coût d&amp;rsquo;accès aux lignes. Le plan présentant le coût le plus faible
est considéré comme le &lt;em>meilleur&lt;/em> plan ; l&amp;rsquo;ensemble des nœuds le composant sera
donc respecté pour récupérer le résultat final. Dans le cas de notre requête, le
moteur estime que les opérations &lt;code>Bitmap Index&lt;/code> et &lt;code>Bitmap Heap&lt;/code> sont les moins
coûteuses en performance.&lt;/p>
&lt;p>Comment le moteur peut-il être certain que ce plan est le moins coûteux ?
Comparons son coût d&amp;rsquo;accès total (ici &lt;code>11.79&lt;/code>) avec un autre plan pour lequel
nous interdisons l&amp;rsquo;usage de l&amp;rsquo;index.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enable_bitmapscan&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">off&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pgbench_history&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> QUERY PLAN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Seq Scan on pgbench_history (cost=0.00..19.50 rows=9 width=116)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Filter: (aid &amp;lt; 1000)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Le coût de lecture complète de la table (nœud &lt;code>Seq Scan&lt;/code>) vaut &lt;code>19.50&lt;/code>, ce qui
est supérieur au plan précédent. Lorsque l&amp;rsquo;on exécute un requête SQL, une partie
du moteur, appelé le planificateur consolide en arrière plan une petite quantité
de plans avant de ne retourner que le meilleur. Plusieurs &lt;a href="https://www.postgresql.org/docs/12/runtime-config-query.html" target="_blank" rel="noopener">paramètres&lt;/a> comme
&lt;code>enable_bitmapscan&lt;/code>, peuvent changer complètement le comportement du planificateur
en réduisant le nombre de choix possibles dans l&amp;rsquo;élaboration de ses plans.&lt;/p>
&lt;p>En complément du coût, la commande &lt;code>EXPLAIN&lt;/code> indique également l&amp;rsquo;estimation du
nombre de lignes que retourneront les nœuds. Dans le cas des deux plans, le
planificateur &lt;em>estime&lt;/em> qu&amp;rsquo;il existe 9 lignes répondant au critère de recherche.
Cette &lt;em>statistique&lt;/em> peut être déduite des vues système &lt;code>pg_class&lt;/code> et &lt;code>pg_stats&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">relpages&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">reltuples&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_stats&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">tablename&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tablename&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;pgbench_history&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">attname&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;aid&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="n">gx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">-[ RECORD 1 ]----------+------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">schemaname | public
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tablename | pgbench_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">attname | aid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inherited | f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">null_frac | 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">avg_width | 4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_distinct | -0.997
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">most_common_vals | {66403,80979,82766}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">most_common_freqs | {0.002,0.002,0.002}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">histogram_bounds | {75,973,1755,… ,98037,98999,99991}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">correlation | 0.047431067
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">most_common_elems |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">most_common_elem_freqs |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">elem_count_histogram |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">relpages | 7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">reltuples | 1000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sans même consulter le contenu de la table &lt;code>pgbench_history&lt;/code>, nous sommes en
possession d&amp;rsquo;informations intéressantes. Nous apprenons que la table contient
exactement 1 000 lignes (&lt;em>reltuples&lt;/em>) et que la colonne &lt;code>aid&lt;/code> présente un nombre
de valeurs distinctes (&lt;em>n_distinct&lt;/em>) qui tend vers &lt;code>-1&lt;/code>, c&amp;rsquo;est-à-dire autant de
valeurs uniques que de lignes dans la table.&lt;/p>
&lt;p>La distribution des valeurs de la colonne &lt;code>aid&lt;/code> est représentée par le tableau
&lt;code>histogram_bounds&lt;/code> de &lt;a href="https://postgresqlco.nf/en/doc/param/default_statistics_target/" target="_blank" rel="noopener">100 éléments&lt;/a>. Ces bornes divisent approximativement les
valeurs dans des groupes de même taille ; comprendre que 1 % des lignes ont une
valeur de colonne &lt;code>aid&lt;/code> comprise entre 75 et 972, 1 % des lignes, entre 973 et
1 754, etc. On peut dès lors supposer que les valeurs possibles de la colonne
&lt;code>aid&lt;/code> s&amp;rsquo;étendent de 75 à 99 991.&lt;/p>
&lt;p>Si l&amp;rsquo;on revient à notre critère de recherche, les lignes dont la valeur &lt;code>aid&lt;/code>
est inférieure à 1 000 représenteraient un peu plus de 1 % des 1000 lignes de la
table, soit environ 10 lignes si toutes les valeurs étaient distinctes.
L&amp;rsquo;estimation de 9 lignes proposée par la commande &lt;code>EXPLAIN&lt;/code> serait donc juste.&lt;/p>
&lt;div class="message">La documentation du projet détaille en profondeur le calcul de ces estimations
avec de nombreux exemples :
&lt;em>&lt;a href="https://www.postgresql.org/docs/12/row-estimation-examples.html" target="_blank" rel="noopener">How the Planner Uses Statistics: Row Estimation Examples&lt;/a>&lt;/em>.&lt;/div>
&lt;hr>
&lt;p>Tout l&amp;rsquo;intérêt des statistiques est donc d&amp;rsquo;apporter suffisamment d&amp;rsquo;éléments
précalculés et économes en espace disque pour que le planificateur puisse faire
des estimations les plus justes possibles. Dès lors qu&amp;rsquo;une estimation est calculée,
le choix du plan d&amp;rsquo;exécution le moins coûteux devient évident. Retenons que le
meilleur plan &lt;strong>doit être&lt;/strong> le moins coûteux en ressources et donc, le plus
optimisé pour la requête SQL.&lt;/p>
&lt;p>Qu&amp;rsquo;advient-il de notre plan si, par erreur ou hasard, les statistiques étaient
erronées ou venaient à disparaître pour la colonne &lt;code>aid&lt;/code> ?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">DELETE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_statistic&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">starelid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;pgbench_history&amp;#39;&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">regclass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">staattnum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">attnum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_attribute&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">attrelid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">starelid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">attname&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;aid&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">RESET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enable_bitmapscan&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pgbench_history&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> QUERY PLAN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Seq Scan on pgbench_history (cost=0.00..19.50 rows=333 width=116)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Filter: (aid &amp;lt; 1000)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>On constate qu&amp;rsquo;en l&amp;rsquo;absence de statistiques sur le critère de sélection, le plan
&lt;code>Bitmap&lt;/code> n&amp;rsquo;est plus le moins coûteux et n&amp;rsquo;est donc plus proposé par le
planificateur. Le moteur privilégera la lecture complète de la table (&lt;code>Seq Scan&lt;/code>)
dont le coût est invariant.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">enable_seqscan&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">off&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pgbench_history&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> QUERY PLAN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Bitmap Heap Scan on pgbench_history
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (cost=10.86..22.02 rows=333 width=116)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Recheck Cond: (aid &amp;lt; 1000)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -&amp;gt; Bitmap Index Scan on pgbench_history_aid_idx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (cost=0.00..10.77 rows=333 width=0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Index Cond: (aid &amp;lt; 1000)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>L&amp;rsquo;estimation de lignes retournées peut paraître surprenante ! Il s&amp;rsquo;agit d&amp;rsquo;un
calcul arbitraire défini dans la classe &lt;code>selfuncs.h&lt;/code> (&lt;a href="https://doxygen.postgresql.org/selfuncs_8h.html#define-members" target="_blank" rel="noopener">source&lt;/a>) avec notamment un
facteur de sélectivité qui s&amp;rsquo;applique sur le nombre total de lignes présentes dans
la table. Ainsi, pour un critère d&amp;rsquo;égalité, ce facteur vaudra 0.5 %
(&lt;code>DEFAULT_EQ_SEL=0.005&lt;/code>) alors qu&amp;rsquo;une comparaison de non-égalité comme celle
de notre exemple, vaudra 33.33 % (&lt;code>DEFAULT_INEQ_SEL=0.3333333333333333&lt;/code>).&lt;/p>
&lt;p>Puisque le planificateur estime devoir parcourir 333 entrées dans l&amp;rsquo;index à défaut
de meilleure estimation, le coût total de ce plan est surévalué à &lt;code>22.02&lt;/code>, au
lieu de &lt;code>11.79&lt;/code> auparavant.&lt;/p>
&lt;hr>
&lt;h2 id="collecte-automatique-des-statistiques">Collecte automatique des statistiques&lt;/h2>
&lt;p>Bien entendu, supprimer des statistiques n&amp;rsquo;est pas une bonne pratique et ne devrait
pas être envisagé pour « changer le comportement » du planificateur. Depuis la
version 8.3 de PostgreSQL, il n&amp;rsquo;y a même plus trop de raison de s&amp;rsquo;inquiéter de
l&amp;rsquo;absence ou de la fraîcheur des statistiques associées à chaque colonne de vos
tables : le processus &lt;a href="https://www.postgresql.org/docs/8.3/runtime-config-autovacuum.html" target="_blank" rel="noopener">autovacuum&lt;/a> (désactivé en 8.1 et 8.2) se charge, entre
autres fonctions, de parcourir régulièrement les tables de vos bases pour collecter
et consolider la table &lt;code>pg_statistic&lt;/code>. Il se porte ainsi garant de la pertinence
des plans d&amp;rsquo;exécution.&lt;/p>
&lt;p>En réalité, ce processus &lt;em>observe&lt;/em> les variations de volumétrie des tables avant
de déclencher l&amp;rsquo;opération &lt;code>ANALYZE&lt;/code> par un processus de maintenance pour cette
table. Ce mécanisme est bien plus pertinent et optimisé qu&amp;rsquo;une exécution à
intervale régulier pour calculer arbitrairement les statistiques de la base.&lt;/p>
&lt;p>Le &lt;a href="https://www.postgresql.org/docs/12/routine-vacuuming.html#AUTOVACUUM" target="_blank" rel="noopener">seuil de déclenchement&lt;/a> de l&amp;rsquo;&lt;em>autoanalyze&lt;/em> est obtenu à l&amp;rsquo;aide d&amp;rsquo;un calcul
trivial impliquant deux paramètres globaux que l&amp;rsquo;on peut surcharger,
&lt;code>autovacuum_analyze_threshold = 50&lt;/code> et &lt;code>autovacuum_analyze_scale_factor = 0.1&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">analyze threshold = analyze base threshold +
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> analyze scale factor * number of tuples
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Prenons l&amp;rsquo;exemple de la table &lt;code>pgbench_accounts&lt;/code> qui contient un million de lignes
avec une contrainte de clé primaire sur la colonne &lt;code>aid&lt;/code>. La vue système
&lt;code>pg_stat_user_tables&lt;/code> dispose d&amp;rsquo;informations complémentaires à celles des
statistiques, notamment la colonne &lt;code>n_mod_since_analyze&lt;/code> qui indique la quantité
de tuples ayant été modifiés depuis la dernière opération de collecte &lt;code>ANALYZE&lt;/code>.
Voyons son contenu après la modification d&amp;rsquo;une portion de lignes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pgbench_accounts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">filler&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">10000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- UPDATE 10000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">last_autoanalyze&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_live_tup&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_mod_since_analyze&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_stat_user_tables&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;pgbench_accounts&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="n">gx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">-[ RECORD 1 ]-------+------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">relname | pgbench_accounts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">last_autoanalyze | 2020-06-18 15:12:55.224493+02
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_live_tup | 1000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_mod_since_analyze | 10000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ici, seul 1 % de la table a subi un changement et le mécanisme de collecte
automatique des statistiques semble ne pas s&amp;rsquo;être déclenché. En effet, le seuil
de déclenchement pour cette table serait plutôt de 100 050 lignes
(&lt;code>50 + 0.1 * 1000000&lt;/code>). Recommençons avec un plus large échantillon et observons
les traces d&amp;rsquo;activité du processus &lt;code>autovacuum&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SYSTEM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">log_min_messages&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">debug2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SYSTEM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">log_autovacuum_min_duration&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_reload_conf&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pgbench_accounts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">filler&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">90051&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- UPDATE 90051
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">last_autoanalyze&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_live_tup&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_mod_since_analyze&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_stat_user_tables&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">u&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;pgbench_accounts&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="n">gx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">-[ RECORD 1 ]-------+------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">relname | pgbench_accounts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">last_autoanalyze | 2020-06-30 17:44:22.424363+02
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_live_tup | 1000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_mod_since_analyze | 0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Comme attendu, un traitement &lt;code>ANALYZE&lt;/code> s&amp;rsquo;est exécuté et a mis à jour les données
de la vue &lt;code>pg_stat_user_tables&lt;/code>, mettant à zéro la colonne &lt;code>n_mod_since_analyze&lt;/code>
jusqu&amp;rsquo;au prochain déclenchement. Côté trace d&amp;rsquo;activité, le mode &lt;code>debug2&lt;/code> écrit
une série d&amp;rsquo;événements tels que les seuils calculés de la table, le démarrage
et la fin du traitement par le &lt;em>worker&lt;/em> dédié.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-r" data-lang="r">&lt;span class="line">&lt;span class="cl">&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">autovacuum&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">processing&lt;/span> &lt;span class="n">database&lt;/span> &lt;span class="s">&amp;#34;demo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">pgbench_accounts&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">vac&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="m">100051&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">threshold&lt;/span> &lt;span class="m">200050&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">anl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="m">100051&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">threshold&lt;/span> &lt;span class="m">100050&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">DEBUG&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">analyzing&lt;/span> &lt;span class="s">&amp;#34;public.pgbench_accounts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">LOG&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">automatic&lt;/span> &lt;span class="n">analyze&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">table&lt;/span> &lt;span class="s">&amp;#34;demo.public.pgbench_accounts&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">system&lt;/span> &lt;span class="n">usage&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">CPU&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="m">0.09&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">system&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="m">0.00&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">elapsed&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="m">0.25&lt;/span> &lt;span class="n">s&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="estimer-la-prochaine-heure-de-la-collecte">Estimer la prochaine heure de la collecte&lt;/h2>
&lt;p>Dans la plupart des cas, les paramètres associés au mécanisme d&amp;rsquo;&lt;em>autovacuum&lt;/em> sont
adaptés à la plupart des tables et assurent une fréquence correcte du calcul des
statistiques. Cependant, au-delà d&amp;rsquo;une certaine volumétrie, une table peut
présenter des incohérences entre son contenu et ses statistiques.&lt;/p>
&lt;p>La modification de 10 % de la table &lt;code>pgbench_accounts&lt;/code> pourrait prendre des jours
voire des semaines avant que ne survienne le traitement &lt;em>autoanalyze&lt;/em>. Il est
donc de la responsabilité du développeur ou du DBA de surveiller l&amp;rsquo;accroissement
de l&amp;rsquo;indicateur &lt;code>n_mod_since_analyze&lt;/code> pour éviter que les statistiques ne soient
trop décorrélées du contenu.&lt;/p>
&lt;p>Pour s&amp;rsquo;en assurer, je crée deux fonctions dans ma base pour récupérer respectivement
les options de stockage d&amp;rsquo;une table (&lt;code>reloptions&lt;/code>) ou à défaut, les paramètres
d&amp;rsquo;instance, ainsi que le calcul du seuil de déclenchement sur la base de la
formule précédente. La seconde fonction s&amp;rsquo;assure notamment que le mécanisme de
collecte automatique n&amp;rsquo;est pas désactivé (&lt;code>autovacuum_enabled = off&lt;/code>).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REPLACE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FUNCTION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_reloption&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reloptions&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="p">[],&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">RETURNS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LANGUAGE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">sql&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">$$&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">coalesce&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">option_value&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">current_setting&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_options_to_table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reloptions&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">option_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">$$&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">CREATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">OR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REPLACE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FUNCTION&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_anl_threshold&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">oid&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">RETURNS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LANGUAGE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">sql&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">$$&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_reloption&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reloptions&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;autovacuum_analyze_threshold&amp;#39;&lt;/span>&lt;span class="p">)::&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">get_reloption&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reloptions&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;autovacuum_analyze_scale_factor&amp;#39;&lt;/span>&lt;span class="p">)::&lt;/span>&lt;span class="nb">float&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">reltuples&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">oid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">o&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">NOT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">EXISTS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_options_to_table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">reloptions&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">option_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;autovacuum_enabled&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">option_value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;off&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">$$&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Avec les résultats de ces fonctions, je peux construire une requête plus évoluée
qui estime l&amp;rsquo;heure du prochain déclenchement en fonction de nombre de modification
et de la dernière collecte.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_live_tup&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_mod_since_analyze&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">get_anl_threshold&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">relid&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">threshold&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">last_autoanalyze&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">current_timestamp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">CASE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_mod_since_analyze&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">THEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_mod_since_analyze&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_anl_threshold&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">relid&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">THEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">ELSE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n_mod_since_analyze&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">get_anl_threshold&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">relid&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">END&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">current_timestamp&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">last_autoanalyze&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">next_autoanalyze&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pg_stat_user_tables&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">relname&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;pgbench_accounts&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="n">gx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">-[ RECORD 1 ]--------+------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">relname | pgbench_accounts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_live_tup | 1000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_mod_since_analyze | 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">threshold | 100050
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">last_autoanalyze | 2020-07-01 15:07:40.134444+02
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">next_autoanalyze |
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pgbench_accounts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">filler&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aid&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">25000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- UPDATE 25000
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">-[ RECORD 1 ]--------+------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">relname | pgbench_accounts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_live_tup | 1000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_mod_since_analyze | 25000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">threshold | 100050
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">last_autoanalyze | 2020-07-01 15:07:40.134444+02
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">next_autoanalyze | 2020-07-01 18:16:43.734491+02
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>La commande &lt;code>ALTER TABLE&lt;/code> suivante permet de modifier les options de stockage de
la table, et d&amp;rsquo;ajuster le seuil du déclenchement automatique de la collecte. À
vous de voir si l&amp;rsquo;activité sur votre table le justifie !&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pgbench_accounts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">autovacuum_analyze_scale_factor&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">01&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">autovacuum_analyze_threshold&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">-[ RECORD 1 ]--------+------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">relname | pgbench_accounts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_live_tup | 1000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_mod_since_analyze | 25000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">threshold | 10000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">last_autoanalyze | 2020-07-01 15:07:40.134444+02
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">next_autoanalyze | 2020-07-01 17:04:34.038917+02
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-[ RECORD 1 ]--------+------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">relname | pgbench_accounts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_live_tup | 1000000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">n_mod_since_analyze | 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">threshold | 10000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">last_autoanalyze | 2020-07-01 17:04:41.987032+02
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">next_autoanalyze |
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Les statistiques jouent un rôle essentiel dans les performances d&amp;rsquo;un moteur
relationnel comme PostgreSQL. Réussir à les maintenir pertinentes est la clé dans
la gestion au quotidien du système. Avec mon exposé, j&amp;rsquo;espère vous avoir démontré
qu&amp;rsquo;il n&amp;rsquo;est pas nécessaire de rafraîchir toutes les statistiques, mais seulement
celles dont le seuil n&amp;rsquo;est plus adapté.&lt;/p>
&lt;p>Dans un genre similaire, un &lt;a href="https://www.depesz.com/2020/01/29/which-tables-should-be-auto-vacuumed-or-auto-analyzed/" target="_blank" rel="noopener">récent article&lt;/a> de Hubert « depesz » Lubaczewski
présente une série de requêtes permettant d&amp;rsquo;identifier les tables nécessitant une
action de maintenance (&lt;code>vacuum&lt;/code> ou &lt;code>analyze&lt;/code>) dans le cas où la routine automatique
ne fait pas correctement son travail. Ce genre de petites astuces peuvent sauver
des vies… (euh) des plans d&amp;rsquo;exécution !&lt;/p></description></item><item><title>Index décomplexé</title><link>https://fljd.in/2019/09/27/index-decomplexe/</link><pubDate>Fri, 27 Sep 2019 16:00:00 +0200</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2019/09/27/index-decomplexe/</guid><description>&lt;blockquote>
&lt;p>&lt;u>Index terminologique&lt;/u> : permet au lecteur de localiser
rapidement un élément dans l&amp;rsquo;ouvrage, sans être contraint de le lire intégralement.
(&lt;a href="https://fr.wikipedia.org/wiki/Index_terminologique" target="_blank" rel="noopener">Wikipédia&lt;/a>)&lt;/p>
&lt;p>&lt;u>Index de base de données&lt;/u> : structure de données qui
permet de retrouver rapidement les données. (&lt;a href="https://fr.wikipedia.org/wiki/Index_%28base_de_donn%C3%A9es%29" target="_blank" rel="noopener">Wikipédia&lt;/a>)&lt;/p>&lt;/blockquote>
&lt;p>L&amp;rsquo;usage du même mot n&amp;rsquo;est pas fortuit. Chacun de ces usages désigne la capacité
d&amp;rsquo;identifier rapidement un mot, un terme (ou plus largement, une donnée) à l&amp;rsquo;aide
d&amp;rsquo;une adresse, comme un numéro de page, ou l&amp;rsquo;emplacement de la donnée sur un disque
ou un volume. D&amp;rsquo;une façon purement scolaire, prenons le mécanisme d&amp;rsquo;indexation le
plus simple : celui basé sur le tri alphanumérique. Lorsque l&amp;rsquo;on parcoure l&amp;rsquo;index
pour retrouver un concept dans un livre, les propositions sont classiquement
dressées dans l&amp;rsquo;ordre alphanumérique de haut en bas, de la page de gauche à la
page de droite (pour de la littérature occidentale).&lt;/p>
&lt;p>Ainsi, le lecteur peut démarrer sa recherche à partir de la première lettre de
son mot, le comparer aux termes triés, recommencer avec la deuxième lettre, etc.
jusqu&amp;rsquo;à identifier le terme voulu ou la racine la plus proche. Le résultat est
alors accompagné d&amp;rsquo;une liste de numéros de pages, dans lesquelles l&amp;rsquo;auteur du
livre a reférencé de lui-même les concepts-clés nécessaires à la recherche par
index.&lt;/p>
&lt;p>&lt;img src="https://fljd.in/img/fr/2019-09-27-index-terminologique.png" alt="Exemple d’un index terminologique">&lt;/p>
&lt;hr>
&lt;p>Pour ce qui est d&amp;rsquo;une base de données dite relationnelle, les informations
relatives à une entité (ou objet), seront réparties dans les colonnes d&amp;rsquo;une ou
de plusieurs tables. L&amp;rsquo;accès aux données est similaire à la recherche d&amp;rsquo;un mot
dans un livre : critère de sélection (un nom de famille, une époque, une jointure,
etc.) et un chemin d&amp;rsquo;accès (le tri alphanumérique pour faire simple).&lt;/p>
&lt;p>En SQL, pour obtenir une portion de données non indexées d&amp;rsquo;une table (la liste
des pages mentionnant un mathématicien, par exemple), nous demandons au moteur
de parcourir la totalité des lignes et de ne retourner que la sélection voulue.
Cette recherche est aussi efficace que de feuilleter un livre intégralement avant
de tomber sur l&amp;rsquo;information.&lt;/p>
&lt;p>La méthode d&amp;rsquo;accès pour récupérer la liste des mathématiciens ayant fait partie
de la famille Gauss peut être obtenue avec l&amp;rsquo;ordre &lt;code>EXPLAIN&lt;/code> suivie de la requête
&lt;code>SELECT&lt;/code> :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">EXPLAIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">ANALYZE&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">BUFFERS&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">firstname&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lastname&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mathematicians&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lastname&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Gauss&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Le résultat correspond au plan d&amp;rsquo;exécution ou &lt;em>query plan&lt;/em>, que le moteur
construit à partir des statistiques mises à sa disposition, telles que le nombre
de lignes connues dans la table, la présence d&amp;rsquo;index ou la ventilation des données
selon leur valeur (aussi appelée histogramme). Durant cette première étape, le
moteur peut établir plusieurs plans pour n&amp;rsquo;en conserver qu&amp;rsquo;un seul dont le coût
d&amp;rsquo;exécution serait le moins élevé et garantir un temps global de traitement le
plus rapide possible.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> QUERY PLAN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Seq Scan on mathematicians
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (cost=0.00..14.33 rows=1 width=18)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (actual time=0.188..0.189 rows=0 loops=1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Filter: ((lastname)::text = &amp;#39;Gauss&amp;#39;::text)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Rows Removed by Filter: 666
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Buffers: shared hit=6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Planning Time: 0.229 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Execution Time: 0.219 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Le nœud &lt;code>Seq Scan&lt;/code> nous confirme que la table a été lue de façon séquentielle et
intégrale, bien qu&amp;rsquo;un filtre ait été appliqué.
L&amp;rsquo;option &lt;code>ANALYZE&lt;/code> enrichit le résultat, en contrepartie d&amp;rsquo;une véritable exécution
de la requête sur les relations de la base (ici, la table &lt;code>mathematicians&lt;/code>).
On y retrouve dès lors le temps réel de recherche et le nombre de lignes
retournées et ignorées.
L&amp;rsquo;option &lt;code>BUFFERS&lt;/code> indique le nombre de blocs parcourus en précisant s&amp;rsquo;ils sont
lus à partir de la mémoire partagée (&lt;em>shared hit&lt;/em>) ou du disque (&lt;em>read&lt;/em>).&lt;/p>
&lt;p>Observons à présent le comportement du moteur et le plan d&amp;rsquo;exécution qu&amp;rsquo;il propose
lorsque ce dernier prend connaissance d&amp;rsquo;un index sur la colonne de recherche
&lt;code>lastname&lt;/code> :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> QUERY PLAN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Index Scan using mathematicians_lastname_idx on mathematicians
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (cost=0.28..8.29 rows=1 width=18)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (actual time=0.043..0.046 rows=1 loops=1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Index Cond: ((lastname)::text = &amp;#39;Gauss&amp;#39;::text)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Buffers: shared hit=3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Planning Time: 0.176 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Execution Time: 0.081 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cette fois-ci, le moteur estime un coût de 8,29 au lieu de 14,33 à l&amp;rsquo;aide de cet
index sur la condition de recherche. On constate un changement dans le nœud
envisagé par le moteur : un parcours par &lt;code>Index Scan&lt;/code> identifie l&amp;rsquo;unique adresse
pour la valeur « Gauss » et récupère les informations connexes dans la table
&lt;code>mathematicians&lt;/code>. Il en résulte une réduction du nombre de blocs parcourus de 3
au lieu de 6 dans l&amp;rsquo;exemple sans index. Le gain sur le temps d&amp;rsquo;exécution est non
négligeable : la requête a mis 81 µs au lieu de 219.&lt;/p>
&lt;p>Cependant, cette situation n&amp;rsquo;est pas immuable et selon la valeur de la recherche,
le plan d&amp;rsquo;exécution sélectionné peut varier. Prenons l&amp;rsquo;exemple des mathématiciens
de la famille Cartan.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl"> QUERY PLAN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Bitmap Heap Scan on mathematicians
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (cost=4.29..8.85 rows=2 width=18)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (actual time=0.067..0.072 rows=2 loops=1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Recheck Cond: ((lastname)::text = &amp;#39;Cartan&amp;#39;::text)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Heap Blocks: exact=2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Buffers: shared hit=4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -&amp;gt; Bitmap Index Scan on mathematicians_lastname_idx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (cost=0.00..4.29 rows=2 width=0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (actual time=0.051..0.051 rows=2 loops=1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Index Cond: ((lastname)::text = &amp;#39;Cartan&amp;#39;::text)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Buffers: shared read=2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Planning Time: 0.173 ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Execution Time: 0.119 ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nous avons affaire à un autre nœud relatif à l&amp;rsquo;usage d&amp;rsquo;un index, le
&lt;code>Bitmap Heap Scan&lt;/code> et son &lt;code>Bitmap Index Scan&lt;/code>. Le moteur a trouvé dans son parcours
d&amp;rsquo;index, deux lignes (&lt;code>rows=2&lt;/code>) dont il stocke les adresses dans un tableau en
mémoire, aussi appelé &lt;em>bitmap&lt;/em>. La récupération des lignes provoque des accès
dits aléatoires et peut devenir coûteuse pour le moteur.&lt;/p>
&lt;hr>
&lt;p>Pour les opérations de comparaison simple comme l&amp;rsquo;égalité, il est recommandé
d&amp;rsquo;utiliser un index &lt;em>b-tree&lt;/em>, par défaut avec l&amp;rsquo;ordre &lt;code>CREATE INDEX&lt;/code>. Cet index
s&amp;rsquo;appuie sur un &lt;a href="https://www.csd.uoc.gr/~hy460/pdf/p650-lehman.pdf" target="_blank" rel="noopener">algorithme du même nom&lt;/a> qui assure le stockage des couples
valeur/adresse au sein d&amp;rsquo;un arbre dit équilibré, dont la profondeur doit être
la plus faible possible pour réduire les coûts de lecture.&lt;/p>
&lt;p>Un index &lt;em>b-tree&lt;/em> est composé :&lt;/p>
&lt;ul>
&lt;li>d&amp;rsquo;un bloc méta ;&lt;/li>
&lt;li>de blocs intermédiaires, dont le bloc racine (&lt;em>root&lt;/em>) ;&lt;/li>
&lt;li>de blocs feuilles.&lt;/li>
&lt;/ul>
&lt;p>Il est possible de les consulter à l&amp;rsquo;aide des fonctions mises à disposition par
les extensions &lt;a href="https://www.postgresql.org/docs/current/pgstattuple.html" target="_blank" rel="noopener">pgstattuple&lt;/a> et &lt;a href="https://www.postgresql.org/docs/current/pageinspect.html" target="_blank" rel="noopener">pageinspect&lt;/a>, et de démêler le parcours
d&amp;rsquo;index que réalise le moteur à chaque exécution.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bt_page_stats&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">live_items&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">generate_series&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">pg_relpages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mathematicians_lastname_idx&amp;#39;&lt;/span>&lt;span class="p">)::&lt;/span>&lt;span class="nb">integer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">LATERAL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bt_page_stats&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mathematicians_lastname_idx&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- blkno | type | live_items
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- -------+------+------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- 1 | l | 317
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- 2 | l | 319
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- 3 | r | 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- 4 | l | 32
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Requête issue de « PostgreSQL Architecture et notions avancées » de Guillaume
Lelarge, &lt;a href="https://www.d-booker.fr/programmation-et-langage/511-architecture-et-notions-avancees-2ed.html" target="_blank" rel="noopener">édition D-BookeR&lt;/a>.&lt;/em>&lt;/p>
&lt;p>La méthode &lt;code>bt_page_stats&lt;/code> associée au nom de l&amp;rsquo;index et le numéro du bloc,
peut être couplée avec la fonction &lt;code>generate_series&lt;/code> pour obtenir une ligne par
bloc appartenant à l&amp;rsquo;index, à l&amp;rsquo;exception du bloc méta. On constate que le bloc
n°3 est la racine (&lt;code>type=r&lt;/code>) de notre &lt;em>b-tree&lt;/em>, bloc à partir duquel le moteur
pourra réaliser les comparaisons successives jusqu&amp;rsquo;à atteindre les valeurs de sa
recherche.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ctid&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">convert_from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39; 00&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;hex&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bt_page_items&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mathematicians_lastname_idx&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- ctid | data | text
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- ---------+-------------------------------------------------+--------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- (1,0) | |
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- (2,38) | 0f 4b 6c 65 65 6e 65 00 | Kleene
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- (4,116) | 1b 5a 61 72 61 6e 6b 69 65 77 69 63 7a 00 00 00 | Zarankiewicz
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Le bloc racine nous indique qu&amp;rsquo;il existe trois ramifications (comme l&amp;rsquo;indiquaient
les statistiques précédentes avec la valeur &lt;code>live_items&lt;/code> du bloc n°3) contenant
les adresses physiques aussi appellées &lt;code>ctid&lt;/code>. Le champs &lt;code>data&lt;/code> varie selon le
type de donnée indexée et s&amp;rsquo;il s&amp;rsquo;agit d&amp;rsquo;un bloc d&amp;rsquo;index ou d&amp;rsquo;un bloc de table ;
dans cet exemple, la colonne &lt;code>text&lt;/code> nous indique la borne basse (&lt;em>minus infinity&lt;/em>)
de chaque bloc. Il est possible d&amp;rsquo;obtenir les extrêmes de chaque bloc feuille
avec la requête suivante :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">convert_from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39; 00&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;hex&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bt_page_stats&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">generate_series&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">pg_relpages&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mathematicians_lastname_idx&amp;#39;&lt;/span>&lt;span class="p">)::&lt;/span>&lt;span class="nb">integer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">LATERAL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bt_page_stats&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mathematicians_lastname_idx&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">type&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;l&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">LATERAL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bt_page_items&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mathematicians_lastname_idx&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">data&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">GROUP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ORDER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">blkno&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- blkno | min | max
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- -------+--------------+--------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- 1 | Abbt | Kleene
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- 2 | Kleene | Zarankiewicz
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- 4 | Zarankiewicz | Zygmund
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>Pour nos exemples de recherche, les noms « Gauss » et « Cartan » sont tous deux
classés entre les lettres A et K, soit dans le bloc n°1 de l&amp;rsquo;index
&lt;code>mathematicians_lastname_idx&lt;/code>. Le parcours se poursuit donc dans ce nouveau bloc
feuille, où les adresses &lt;code>ctid&lt;/code> correspondent à présent aux blocs physiques de
la table &lt;code>mathematicians&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ctid&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">convert_from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">decode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">data&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39; 00&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;hex&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bt_page_items&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mathematicians_lastname_idx&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">text&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">IN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Gauss&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Cartan&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- ctid | data | text
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- ---------+-------------------------+--------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- (3,8) | 0f 43 61 72 74 61 6e 00 | Cartan
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- (4,8) | 0f 43 61 72 74 61 6e 00 | Cartan
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- (1,102) | 0d 47 61 75 73 73 00 00 | Gauss
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Les résultats des plans d&amp;rsquo;exécution précédents s&amp;rsquo;expliquent ! Pour rappel, nous
avions un nœud &lt;code>Index Scan&lt;/code> pour la recherche « Gauss » et deux nœuds
&lt;code>Bitmap Heap/Index Scan&lt;/code> pour la recherche &lt;code>Cartan&lt;/code>.&lt;/p>
&lt;p>La première recherche effectue physiquement deux lectures dans l&amp;rsquo;index (blocs 3
puis 1) avant de lire le bloc de données &lt;code>(1,102)&lt;/code>, soit un total de trois blocs,
cohérent avec le plan d&amp;rsquo;exécution (&lt;code>Buffers: shared hit=3&lt;/code>).&lt;/p>
&lt;p>La seconde recherche effectue également deux lectures dans l&amp;rsquo;index mais ira
récupérer deux lignes distinctes à deux endroits différents de la table (adresses
&lt;code>(3,8)&lt;/code> et &lt;code>(4,8)&lt;/code>), soit un total de quatre blocs, valeur également annoncée
par le plan (&lt;code>Buffers: shared hit=4&lt;/code>).&lt;/p>
&lt;hr>
&lt;p>Bien évidemment, la consultation du contenu des index n&amp;rsquo;est pas nécessaire pour
l&amp;rsquo;analyse de performances. Ces derniers vivent et s&amp;rsquo;équilibrent à chaque
modification de données pour maintenir les adresses physiques et garantir un accès
optimisé avec la profondeur de lecture la plus faible possible.&lt;/p>
&lt;p>L&amp;rsquo;ajout d&amp;rsquo;un index ne doit pas être un réflexe systèmatique. Il faut tenir compte
de la cardinalité des données d&amp;rsquo;une colonne, autrement dit, la faible proportion
de données retournée à chaque filtre. Dans le cas de la table &lt;code>mathematicians&lt;/code>,
une recherche basée sur les conditions &lt;code>LIKE&lt;/code> ou &lt;code>&amp;gt;&lt;/code> pourrait très simplement
parcourir l&amp;rsquo;ensemble des six blocs de la table (&lt;code>Seq Scan&lt;/code>), car moins coûteux
que le parcours de plusieurs blocs d&amp;rsquo;index supplémentaires.&lt;/p>
&lt;p>Cet article s&amp;rsquo;est concentré sur le fonctionnement de l&amp;rsquo;index le plus courant
&lt;em>b-tree&lt;/em> mais il en existe encore d&amp;rsquo;autres, répondant à des contraintes variées
de recherche et de stockage !&lt;/p>
&lt;div class="message">Si la démonstration vous a plu, le jeu de données &lt;code>fr-mathematicians.sql&lt;/code> est
disponible sur &lt;a href="https://github.com/fljdin/database-samples/blob/master/fr-mathematians.sql" target="_blank" rel="noopener">Github&lt;/a>
et provient de la page
« &lt;a href="https://fr.wikipedia.org/wiki/Projet:Math%C3%A9matiques/Liste_des_math%C3%A9maticiens" target="_blank" rel="noopener">Liste des mathématiciens&lt;/a> »
disponible sur Wikipédia.&lt;/div></description></item></channel></rss>