<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Performance on Carnet de découvertes</title><link>https://fljd.in/tags/performance/</link><description>Recent content in Performance on Carnet de découvertes</description><generator>Hugo -- gohugo.io</generator><language>fr</language><managingEditor>Florent Jardin</managingEditor><lastBuildDate>Fri, 23 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://fljd.in/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Le partitionnement par hachage</title><link>https://fljd.in/2021/04/23/le-partitionnement-par-hachage/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2021/04/23/le-partitionnement-par-hachage/</guid><description>&lt;p>Le partitionnement déclaratif a été une véritable révolution à la sortie de la
version 10 de PostgreSQL en octobre 2017. La gestion des sous-tables devenait
alors bien plus aisée au quotidien, simplifiant leur mise en place et leur
maintenance.&lt;/p>
&lt;p>Sans cesse amélioré au cours des dernières années, je me souviens encore de mon
émerveillement devant la magie du partitionnement par hachage, &lt;a href="https://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=1aba8e651ac3e37e1d2d875842de1e0ed22a651e" target="_blank" rel="noopener">apparu&lt;/a> en
version 11. Comment le déployer et que permet-il ? J&amp;rsquo;ai voulu m&amp;rsquo;en rendre compte
dans une rapide démonstration sur le type &lt;a href="https://fr.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="noopener">UUID&lt;/a> en étudiant les fonctions
d&amp;rsquo;appui qui se cachent derrière le hachage des valeurs.&lt;/p></description></item><item><title>Comprendre les requêtes préparées</title><link>https://fljd.in/2021/03/30/comprendre-les-requetes-preparees/</link><pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2021/03/30/comprendre-les-requetes-preparees/</guid><description>&lt;p>Les requêtes ou &lt;a href="https://en.wikipedia.org/wiki/Prepared_statement" target="_blank" rel="noopener">instructions préparées&lt;/a> sont un mécanisme proposé par la
plupart des moteurs de bases de données afin de réexécuter un ordre SQL semblable
au précédent. On parle d&amp;rsquo;un &lt;em>template&lt;/em> de requête qu&amp;rsquo;il est nécessaire de
préparer avant d&amp;rsquo;exécuter. Les principaux bénéfices que nous lui connaissons
méritent un article afin de mieux comprendre leur implémentation.&lt;/p></description></item><item><title>Tour d'horizon de PgBouncer</title><link>https://fljd.in/2020/08/21/tour-d-horizon-de-pgbouncer/</link><pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2020/08/21/tour-d-horizon-de-pgbouncer/</guid><description>&lt;blockquote>
&lt;p>Les programmes de regroupement de connexions (&lt;em>pooling&lt;/em>) vous permettent de
réduire la surcharge liée à la base de données lorsque le nombre de connexions
physiques réduit les performances. Ceci est particulièrement pertinent sous
Windows, où les limitations du système empêchent un grand nombre de connexions.
C&amp;rsquo;est également vital pour les applications Web où le nombre de connexions peut
devenir très important.&lt;/p>
&lt;p>(Source : &lt;a href="https://wiki.postgresql.org/wiki/Replication,_Clustering,_and_Connection_Pooling#Connection_Pooling_and_Acceleration" target="_blank" rel="noopener">https://wiki.postgresql.org&lt;/a>)&lt;/p>&lt;/blockquote>
&lt;p>Je n&amp;rsquo;ai pas trouvé meilleure approche que la traduction du wiki communautaire du
projet PostgreSQL pour aborder l&amp;rsquo;outil PgBouncer, faisant partie avec Pgpool-II,
des deux seuls &lt;em>poolers&lt;/em> de connexions largement répandus. Le produit est
déconcertant de facilité, sa documentation et la littérature qui gravitent sur
Internet sont claires et unanimes : PgBouncer améliorera grandement les
performances de votre instance PostgreSQL !&lt;/p></description></item><item><title>Les statistiques au service du plan d'exécution</title><link>https://fljd.in/2020/07/01/les-statistiques-au-service-du-plan-d-execution/</link><pubDate>Wed, 01 Jul 2020 20:30:00 +0200</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2020/07/01/les-statistiques-au-service-du-plan-d-execution/</guid><description>&lt;p>La lecture d&amp;rsquo;un plan d&amp;rsquo;exécution fait partie des meilleures armes du développeur
et de l&amp;rsquo;administrateur de bases de données pour identifier les problèmes de
performances. Dans &lt;a href="https://fljd.in/2019/09/27/index-decomplexe">un précédent article&lt;/a>, je
présentais l&amp;rsquo;intérêt de positionner un index sur les colonnes d&amp;rsquo;une table pour
faciliter les recherches, notamment avec l&amp;rsquo;aide de la commande &lt;code>EXPLAIN&lt;/code>.&lt;/p>
&lt;p>À cette époque, je ne m&amp;rsquo;étais pas attardé sur la notion des statistiques de
données, que l&amp;rsquo;on retrouve dans la plupart des moteurs du marché. Voyons de plus
près ce que propose PostgreSQL pour garantir les performances de vos requêtes.&lt;/p></description></item><item><title>Index décomplexé</title><link>https://fljd.in/2019/09/27/index-decomplexe/</link><pubDate>Fri, 27 Sep 2019 16:00:00 +0200</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2019/09/27/index-decomplexe/</guid><description>&lt;blockquote>
&lt;p>&lt;u>Index terminologique&lt;/u> : permet au lecteur de localiser
rapidement un élément dans l&amp;rsquo;ouvrage, sans être contraint de le lire intégralement.
(&lt;a href="https://fr.wikipedia.org/wiki/Index_terminologique" target="_blank" rel="noopener">Wikipédia&lt;/a>)&lt;/p>
&lt;p>&lt;u>Index de base de données&lt;/u> : structure de données qui
permet de retrouver rapidement les données. (&lt;a href="https://fr.wikipedia.org/wiki/Index_%28base_de_donn%C3%A9es%29" target="_blank" rel="noopener">Wikipédia&lt;/a>)&lt;/p>&lt;/blockquote></description></item></channel></rss>