<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developpement on Carnet de découvertes</title><link>https://fljd.in/tags/developpement/</link><description>Recent content in Developpement on Carnet de découvertes</description><generator>Hugo -- gohugo.io</generator><language>fr</language><managingEditor>Florent Jardin</managingEditor><lastBuildDate>Tue, 17 Jun 2025 10:45:00 +0200</lastBuildDate><atom:link href="https://fljd.in/tags/developpement/index.xml" rel="self" type="application/rss+xml"/><item><title>Le partitionnement par UUID v7</title><link>https://fljd.in/2025/06/17/le-partitionnement-par-uuid-v7/</link><pubDate>Tue, 17 Jun 2025 10:45:00 +0200</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2025/06/17/le-partitionnement-par-uuid-v7/</guid><description>&lt;p>Au dernier PG Day 2025, j’ai pris la parole pour présenter une méthode de
conception que je juge mature et astucieuse : le partitionnement temporel
avec le type UUID et sa version 7.&lt;/p>
&lt;p>Le support de présentation est disponible à cette &lt;a href="https://fljd.in/documents/pgdayfr-2025-lightning-talk-partitionnement-uuidv7.pdf">adresse&lt;/a> et je reprendrais
dans cet article, les exemples en guise de démonstration. Je vous propose de
passer en détail ce que j’ai pu y dire, et ne pas y dire faute de temps.
Également, je vous invite à lire ou redécouvrir mes recherches sur le
&lt;a href="https://fljd.in/2021/04/23/le-partitionnement-par-hachage/">partitionnement par hachage&lt;/a>.&lt;/p></description></item><item><title>Substituer une variable dans un script SQL</title><link>https://fljd.in/2024/11/25/substituer-une-variable-dans-un-script-sql/</link><pubDate>Mon, 25 Nov 2024 09:00:00 +0100</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2024/11/25/substituer-une-variable-dans-un-script-sql/</guid><description>&lt;p>Il est fréquent de vouloir automatiser une tâche répétitive en la scriptant
rapidement, puis à force d&amp;rsquo;itérations, de l&amp;rsquo;enrichir, voire de l&amp;rsquo;intégrer dans
la base de code d&amp;rsquo;un projet. À ce jeu, les outils comme SQL*Plus et psql peuvent
être de puissants alliés et des interpréteurs aussi pertinents que Bash ou
Python.&lt;/p>
&lt;p>Dans le cadre des projets de migration que je mène régulièrement, il m&amp;rsquo;arrive de
tomber sur ces scripts, en grand nombre. Certains ont la particularité de
proposer des paramètres d&amp;rsquo;entrée, traités par SQL*Plus avec le mécanisme très
confortable de substitution de variables. Dans cet article, je partage quelques
astuces pour convertir certains aspects de ces scripts grâce aux fonctionnalités
équivalentes que l&amp;rsquo;on retrouve sur l&amp;rsquo;outil psql de PostgreSQL.&lt;/p></description></item><item><title>Poissons et coquillages</title><link>https://fljd.in/2024/10/14/poissons-et-coquillages/</link><pubDate>Mon, 14 Oct 2024 10:30:00 +0200</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2024/10/14/poissons-et-coquillages/</guid><description>&lt;p>En tant que pur produit académique des années 2010, mon langage de script de prédilection a
toujours été le Bash (&lt;em>Bourne Again Shell&lt;/em>). Non sans ignorer qu&amp;rsquo;il ait pu en exister d&amp;rsquo;autres, je
ne me suis jamais vraiment tourné vers d&amp;rsquo;autres shells pour automatiser les tâches du quotidien
dans mon métier de DBA.&lt;/p>
&lt;p>Et pour cause, j&amp;rsquo;ai administré des centaines de serveurs de distributions très variées et il
n&amp;rsquo;était pas bien vu d&amp;rsquo;installer des dépendances systèmes lourdes pour enrichir des scripts Python
ou Perl. Nous apprenions donc à écrire des scripts portables et universels, compatibles partout
où nous déposions nos valises.&lt;/p>
&lt;p>Me suis-je enfermé dans un dogme conservateur, en m&amp;rsquo;interdisant &lt;em>de facto&lt;/em> à me tourner vers des
shells modernes et bien plus aisés à appréhender ?&lt;/p></description></item><item><title>Les types hiérarchiques</title><link>https://fljd.in/2024/09/19/les-types-hierarchiques/</link><pubDate>Thu, 19 Sep 2024 13:20:00 +0200</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2024/09/19/les-types-hierarchiques/</guid><description>&lt;p>Bien que la norme SQL définisse un ensemble de règles pour que les systèmes de bases
de données puissent être interchangeables, il existe de petites singularités dans la
nature. À ce titre, le type de données &lt;code>hierarchyid&lt;/code> fourni par SQL Server est un
exemple flagrant. Si vous êtes amené à basculer vers PostgreSQL, deux solutions s&amp;rsquo;offrent
à vous.&lt;/p>
&lt;p>Une première et plus simple consiste à lier chaque nœud à son parent à l&amp;rsquo;aide d&amp;rsquo;une nouvelle
colonne &lt;code>parentid&lt;/code> et d&amp;rsquo;y appliquer une contrainte de clé étrangère. Une autre approche,
plus complète, consiste à utiliser l&amp;rsquo;extension &lt;code>ltree&lt;/code>. Cet article traite de ce dernier
cas.&lt;/p></description></item><item><title>Un assistant pour copier les données distantes</title><link>https://fljd.in/2024/05/28/un-assistant-pour-copier-les-donnees-distantes/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><author>Florent Jardin</author><guid>https://fljd.in/2024/05/28/un-assistant-pour-copier-les-donnees-distantes/</guid><description>&lt;p>Lors de la dernière &lt;a href="https://blog.dalibo.com/2023/12/08/pgsession16_programme.html" target="_blank" rel="noopener">PGSession 16&lt;/a>, j&amp;rsquo;ai rédigé et animé un &lt;a href="https://dali.bo/wsfdw_html" target="_blank" rel="noopener">atelier&lt;/a> de
trois heures au sujet de la migration vers PostgreSQL à l&amp;rsquo;aide des Foreign Data
Wrappers, ou FDW. Ce fut notamment l&amp;rsquo;occasion de présenter au grand public,
l&amp;rsquo;extension &lt;a href="https://github.com/cybertec-postgresql/db_migrator" target="_blank" rel="noopener">&lt;code>db_migrator&lt;/code>&lt;/a> pour laquelle j&amp;rsquo;ai dédié un &lt;a href="https://fljd.in/2023/07/28/en-route-vers-la-liberte-avec-db_migrator/">article&lt;/a> sur ce
blog.&lt;/p>
&lt;p>Au cours de cet atelier, nous pouvons constater que la copie des données avec
l&amp;rsquo;extension &lt;code>db_migrator&lt;/code> n&amp;rsquo;est pas parfaitement prise en charge. En effet, bien
qu&amp;rsquo;il existe une fonction de bas niveau pour répartir sur plusieurs processus le
transfert table à table, de nombreuses situations devront exiger de rédiger un
grand nombre de requêtes SQL pour se tirer d&amp;rsquo;affaire. Au cours des mois qui
suivirent, je me suis attelé à la conception d&amp;rsquo;un &lt;a href="https://github.com/fljdin/fdw-assistant" target="_blank" rel="noopener">assistant&lt;/a> écrit en
PL/pgSQL dont le but est de simplifier la génération de ces requêtes.&lt;/p></description></item></channel></rss>